import websockets
import asyncio
import uuid
import httpx
import json

async def main():
    client_id = str(uuid.uuid4())
    print(f"–í–∞—à client_id: {client_id}")
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
    
    async with httpx.AsyncClient() as client:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        try:
            token_response = await client.post(
                "http://localhost:8000/token",
                data={"username": username, "password": password, "grant_type": "password"}
            )
            
            if token_response.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {token_response.status_code}")
                return
                
            token_data = token_response.json()
            access_token = token_data["access_token"]
            print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        async with websockets.connect(
            f"ws://localhost:8000/ws/{client_id}",
            ping_interval=30,
            ping_timeout=120
        ) as websocket:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await websocket.send("TEST_CONNECTION")
            response = await websocket.recv()
            if response != "CONNECTION_OK":
                print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket")
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏
            url = input("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: ")
            build_graph = input("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ —Å–∞–π—Ç–∞? (y/n): ").lower() == 'y'
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    "http://localhost:8000/parse-url",
                    json={
                        "url": url,
                        "client_id": client_id,
                        "build_graph": build_graph
                    },
                    headers={"Authorization": f"Bearer {access_token}"}
                )
                task_info = response.json()
                print(f"\n–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞. ID: {task_info['id']}")

            # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            print("\n–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
            print("=" * 50)
            
            while True:
                try:
                    message = await asyncio.wait_for(websocket.recv(), timeout=30.0)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ ping/pong
                    if message == "ping":
                        await websocket.send("pong")
                        continue
                    
                    try:
                        data = json.loads(message)
                        
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        if data.get("type") == "progress":
                            msg = data["message"]
                            count = data.get("count", 0)
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
                            if "–û–±—Ä–∞–±–æ—Ç–∫–∞" in msg:
                                print(f"\n {msg}")
                            elif "–†–µ–∑—É–ª—å—Ç–∞—Ç" in msg:
                                status = count
                                status_str = f"–°—Ç–∞—Ç—É—Å: {status}"
                                if status == 200:
                                    print(f" {status_str}")
                                elif status >= 400:
                                    print(f" {status_str}")
                                else:
                                    print(f"‚ÑπÔ∏è {status_str}")
                            elif "–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫" in msg:
                                print(f" {msg}")
                            else:
                                print(f"‚ÑπÔ∏è {msg}")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        elif data.get("type") == "result":
                            result_data = data.get("data", {})
                            print("\n" + "=" * 50)
                            print("üéâ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê")
                            
                            if build_graph:
                                graph = result_data.get("graph", {})
                                print(f"–£–∑–ª–æ–≤ –≥—Ä–∞—Ñ–∞: {len(graph)}")
                                print(f"–°–≤—è–∑–µ–π: {sum(len(links) for links in graph.values())}")
                                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {result_data.get('message', '')}")
                            else:
                                links = result_data.get("links", [])
                                print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}")
                                print("–ü–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫:")
                                for link in links[:5]:
                                    print(f"  ‚Ä¢ {link}")
                            
                            print("=" * 50)
                            break
                    
                    except json.JSONDecodeError:
                        print(f"üì® {message}")
                
                except asyncio.TimeoutError:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    try:
                        await websocket.send("ping")
                        print("‚ö° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                    except:
                        break
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
                    break
                    
    except Exception as e:
        print(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("=" * 50)
    print("üåê –†–ï–ê–õ–¨–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ê–†–°–ò–ù–ì–ê –°–ê–ô–¢–û–í")
    print("=" * 50)
    asyncio.run(main())